pubsub {
  app {
    timeout = 10 # seconds
    host = "0.0.0.0"
    port = 8086
  }

  message {
    fullRoom = "full room, no in"
    unAvailableRoom = "unavailable room"
  }

  actor {
    timeout = 5 # seconds
    articleLoaderTimeout = 20 # seconds

    dashBoardLifeHours = 24

    articleLifeHours = 6
    interestLifeHours = 6
    providerLifeHours = 3
    userLifeHours = 24
    experienceLifeHours = 12
    magazineLifeHours = 6
    categoryLifeHours = 6

    overflowRate = 0.95

    articleCount = 100000
    interestCount = 1000
    providerCount = 10000
    userCount = 10000
    experienceCount = 10000
    magazineCount = 1000
    categoryCount = 100

    dashBoardTick = 15
    articleTick = 10
    interestTick = 16
    providerTick = 15
    userTick = 12
    experienceTick = 14
    magazineTick = 11
    categoryTick = 11
  }


}


qingmang {
  port = 80
  host {
    online = "100.114.89.119"
    debug = "api.qingmang.me"
  }
  path {
    segmenter = "/v1/segmenter.segment"
    interestConsume = "/v1/interest.consume?docids=%s"
    getFeeds = "/v1/ripak/feed/getFeeds?ids=%s"
    queryTL = "/v1/ripak/provider/queryTL"
  }
}

#  store
store.slick.pass-through {
  ripak_ng {
    driver = "com.mysql.jdbc.Driver"
    user = "ripak_ng"
    password = "ThMyDjong82NaQGg"
    url {
      debug = "jdbc:mysql://rdsr74o30gud4v5pgv4a.mysql.rds.aliyuncs.com:3306/ripak_ng?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&jdbcCompliantTruncation=false&zeroDateTimeBehavior=convertToNull"
      online = "jdbc:mysql://rdsr74o30gud4v5pgv4a.mysql.rds.aliyuncs.com:3306/ripak_ng?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&jdbcCompliantTruncation=false&zeroDateTimeBehavior=convertToNull"
    }
    minConnections = 2
    maxConnections = 100
    numThreads = 20
    queueSize = 100000
    connectionTimeout = 3000
  }
}

akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
  log-config-on-start = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    netty.tcp.hostname = "127.0.0.1"
    netty.tcp.port = 3563
    transport-failure-detector {
      heartbeat-interval = 4 s   # default 4s
      acceptable-heartbeat-pause = 10 s  # default 10s
    }
  }

  cluster {
    roles = ["entity"]
    sharding.role = "entity"
    seed-nodes = ["akka.tcp://ripak-ng-pubsub@127.0.0.1:3563"]
    auto-down-unreachable-after = off
    metrics.enabled = off
    failure-detector {
      acceptable-heartbeat-pause = 6 s # default 3 s
      threshold = 12.0    # default 8.0
    }
    scheduler {
      # make it less than system's tick-duration to force start a new one
      tick-duration = 9 ms # default 33ms
      ticks-per-wheel = 512 # default 512
    }
    use-dispatcher = cluster-dispatcher
    pub-sub.gossip-interval = 3s  # default 1s
  }
}

akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/journal"
akka.persistence.journal.leveldb.native = off

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/snapshots"

akka.http.host-connection-pool {
  max-connections = 256
  max-open-requests = 8192
}
# default is 8m
akka.http.server.parsing.max-content-length = 20m
akka.http.client.parsing.max-content-length = 20m

cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-max = 4
  }
}

