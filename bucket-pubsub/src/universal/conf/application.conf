pubsub {
  app {
    timeout = 10 # seconds
    host = "0.0.0.0"
    port = 8086
  }
  admins = "29"

  warmUp {
    timeout = 60 # seconds

    docBatchLoadNum = 2000
    loadSizePerSource = 100

    magazineNum = 50
    docNum = 2000

    mergeTimeout = 2 # seconds
  }

  actor {
    timeout = 5 # seconds
    articleLoaderTimeout = 20 # seconds

    dashBoardLifeHours = 24

    articleLifeHours = 6
    interestLifeHours = 6
    providerLifeHours = 3
    userLifeHours = 24
    experienceLifeHours = 12
    magazineLifeHours = 6
    categoryLifeHours = 6

    overflowRate = 0.95

    articleCount = 100000
    interestCount = 1000
    providerCount = 10000
    userCount = 10000
    experienceCount = 10000
    magazineCount = 1000
    categoryCount = 100

    dashBoardTick = 15
    articleTick = 10
    interestTick = 16
    providerTick = 15
    userTick = 12
    experienceTick = 14
    magazineTick = 11
    categoryTick = 11
  }

  timeline {
    loadDaysPerSource = 15
    loadConsumeDaysPerMid = 15

    loadSizePerSource = 300
    loadMoreThreshold = 50

    mergeTimeout = 4 # seconds

    # preRank 在 rank 之前先截断，保证 rank 有足够的空间又不至于 check 太多的 events
    # 因此 preRankSize 比 rankSize 稍微大一些即可
    preRankSizeMap = ["mark:300", "image:300", "shortVideo:300", "imageSet:30", "article:300", "video:30"]

    rankSizeMap = ["mark:100", "image:100", "shortVideo:100", "imageSet:10", "article:100", "video:10"]

    # cache in rankedObj rankingSections
    cacheSizeMap = ["mark:50", "image:50", "shortVideo:50", "imageSet:5", "article:50", "video:5"]

    defaultLayouts = ["mark:5", "shortVideo:10", "image:10", "imageSet:1", "article:3", "video:1"]

    tmpHistoryMins = 10

    # merger rate for each type. sum is 100%
    subscribeFirstRatio = [
      "userSubMagazineSub:0.70",
      "userSub:0.10",
      "magazineSub:0.10",
      "unSub:0.10"]

    sorter {
      explore {
        merger: "default"
        scorer: "default"
        ranker: "default"
      }
    }

    # 打散策略中当重复的条目数达到时便打散
    sparseNum = 3

    # 来源 reason boost
    magazineBoost {
      subscribed = 2.0
      defaultSubscribed = 1.0
      canceled = 0.5
      other = 0.8
    }

    # 来源 reason boost
    userBoost {
      subscribed = 3.0
      defaultSubscribed = 1.5
      canceled = 0.5
      other = 0.8
    }

    # 来源 reason boost
    extraAddBoost = 1.2

    # 关注的用户对文章的 mark 的 weight boost
    followUserScoreBoost = 1.2

    # 时新性特征
    dailyCountLimit = 5
    dailyWeightLimit = 50 # top 100 user experience
    weeklyCountLimit = 10 # 3 days
    weeklyWeightLimit = 100

    # magazine 小花推荐截断
    xiaohuaCountLimit = 2
    xiaohuaWeightLimit = 10
    xiaohuaPreRankSize = 100
    xiaohuaCacheSize = 50

    # dislike 丢弃策略
    dislikeCountLimit = 4
    dislikeWeightLimit = 50

    # 预排序的 mark 时间
    preRankLatestDays = 15
    preRankLoadMins = 30 # min

    # profile 页每次加载 iterm 数量
    profileLoadSize = 100
  }

  recommend {
    relatedDocPollSize = 100
    relatedDocCacheSize = 600

    relatedDocNum = 6
    relatedMagazineNum = 4
  }

  exp {
    mark = 10
    share = 5
    highlight = 2
    read = 1
    dislike = -10
  }

  article {
    noteRatio = 0.5

    # primaryMark
    primaryMarkWeight = 2
  }

}

cassandra {
  hosts {
    debug = ["10.24.197.168", "10.27.216.65", "10.25.177.188"]
    online = ["10.24.197.168", "10.27.216.65", "10.25.177.188"]
  }
  port = "9042"
  timeout = 120000
}

brooks.cassandra.pass-through {
  hosts = ["10.24.197.168", "10.27.216.65", "10.25.177.188"]
  port = "9042"

  keyspace = "brooks"
}

qingmang {
  port = 80
  host {
    online = "100.114.89.119"
    debug = "api.qingmang.me"
  }
  path {
    segmenter = "/v1/segmenter.segment"
    interestConsume = "/v1/interest.consume?docids=%s"
    getFeeds = "/v1/ripak/feed/getFeeds?ids=%s"
    queryTL = "/v1/ripak/provider/queryTL"
  }
}

ripple {
  port = 80
  host {
    online = "100.114.87.2"
    debug = "ripple.qingmang.me"
  }
  path {
    pipelineadd = "/api/v1/interest/admin/feed/pipelineadd"
    articleList = "/v1/article.list?docids=%s&template=raml&product=life"
    magazineList = "/v1/magazine.list?interest_ids=%s"
    articleWithImage = "/v1/magazine.articleWithImages?udid=dewprod&start=0&max=%d"
  }
}

#  store
store.slick.pass-through {
  note {
    driver = "com.mysql.jdbc.Driver"
    user = "note"
    password = "ThMyDjong82NaQGg"
    url {
      debug = "jdbc:mysql://rdsr74o30gud4v5pgv4a.mysql.rds.aliyuncs.com:3306/note?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&jdbcCompliantTruncation=false&zeroDateTimeBehavior=convertToNull"
      online = "jdbc:mysql://rdsr74o30gud4v5pgv4a.mysql.rds.aliyuncs.com:3306/note?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&jdbcCompliantTruncation=false&zeroDateTimeBehavior=convertToNull"
    }
    minConnections = 2
    maxConnections = 200
    numThreads = 20
    queueSize = 100000
    connectionTimeout = 3000
  }
  ripple {
    driver = "com.mysql.jdbc.Driver"
    user = "ripple"
    password = "ThMyDjong82NaQGg"
    url {
      debug = "jdbc:mysql://rdsr74o30gud4v5pgv4a.mysql.rds.aliyuncs.com:3306/ripple?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&jdbcCompliantTruncation=false&zeroDateTimeBehavior=convertToNull"
      online = "jdbc:mysql://rdsr74o30gud4v5pgv4a.mysql.rds.aliyuncs.com:3306/ripple?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&jdbcCompliantTruncation=false&zeroDateTimeBehavior=convertToNull"
    }
    minConnections = 2
    maxConnections = 100
    numThreads = 20
    queueSize = 100000
    connectionTimeout = 3000
  }
  account {
    driver = "com.mysql.jdbc.Driver"
    user = "notification"
    password = "ThMyDjong82NaQGg"
    url {
      debug = "jdbc:mysql://rdsr74o30gud4v5pgv4a.mysql.rds.aliyuncs.com:3306/account?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&jdbcCompliantTruncation=false&zeroDateTimeBehavior=convertToNull"
      online = "jdbc:mysql://rdsr74o30gud4v5pgv4a.mysql.rds.aliyuncs.com:3306/account?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&jdbcCompliantTruncation=false&zeroDateTimeBehavior=convertToNull"
    }
    minConnections = 2
    maxConnections = 100
    numThreads = 20
    queueSize = 100000
    connectionTimeout = 3000
  }
  ripak_ng {
    driver = "com.mysql.jdbc.Driver"
    user = "ripak_ng"
    password = "ThMyDjong82NaQGg"
    url {
      debug = "jdbc:mysql://rdsr74o30gud4v5pgv4a.mysql.rds.aliyuncs.com:3306/ripak_ng?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&jdbcCompliantTruncation=false&zeroDateTimeBehavior=convertToNull"
      online = "jdbc:mysql://rdsr74o30gud4v5pgv4a.mysql.rds.aliyuncs.com:3306/ripak_ng?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&jdbcCompliantTruncation=false&zeroDateTimeBehavior=convertToNull"
    }
    minConnections = 2
    maxConnections = 100
    numThreads = 20
    queueSize = 100000
    connectionTimeout = 3000
  }
}

akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
  log-config-on-start = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    netty.tcp.hostname = "127.0.0.1"
    netty.tcp.port = 3563
    transport-failure-detector {
      heartbeat-interval = 4 s   # default 4s
      acceptable-heartbeat-pause = 10 s  # default 10s
    }
  }

  cluster {
    roles = ["entity"]
    sharding.role = "entity"
    seed-nodes = ["akka.tcp://ripak-ng-pubsub@127.0.0.1:3563"]
    auto-down-unreachable-after = off
    metrics.enabled = off
    failure-detector {
      acceptable-heartbeat-pause = 6 s # default 3 s
      threshold = 12.0    # default 8.0
    }
    scheduler {
      # make it less than system's tick-duration to force start a new one
      tick-duration = 9 ms # default 33ms
      ticks-per-wheel = 512 # default 512
    }
    use-dispatcher = cluster-dispatcher
    pub-sub.gossip-interval = 3s  # default 1s
  }
}

akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/journal"
akka.persistence.journal.leveldb.native = off

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/snapshots"

akka.http.host-connection-pool {
  max-connections = 256
  max-open-requests = 8192
}
# default is 8m
akka.http.server.parsing.max-content-length = 20m
akka.http.client.parsing.max-content-length = 20m

cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-max = 4
  }
}

# from comma
reload.period.minutes {
  interestConfig = 10
  interestDoc = 10
}

timeout.seconds {
  interestDoc.load = 120
  interestSubscribe.load = 120
  interestConfig.load = 10
  wdjAppDetail.load = 60
}

effective.days {
  interestFeed = 30
  interestTimeline = 30
}

comma {
  section {
    shortVideo {
      minDuration = 0   # include, seconds
      maxDuration = 61  # exclude, seconds
    }
    longVideo {
      minDuration = 61  # include, seconds
      maxDuration = 1801 # exclude, seconds
    }
  }
}
